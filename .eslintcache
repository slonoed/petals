[{"/Volumes/PlugableSSD/slonoed/projects/petals/src/index.js":"1","/Volumes/PlugableSSD/slonoed/projects/petals/src/App.js":"2","/Volumes/PlugableSSD/slonoed/projects/petals/src/reportWebVitals.js":"3","/Volumes/PlugableSSD/slonoed/projects/petals/src/die.js":"4","/Volumes/PlugableSSD/slonoed/projects/petals/src/rating.js":"5","/Volumes/PlugableSSD/slonoed/projects/petals/src/number.js":"6"},{"size":547,"mtime":1611383292033,"results":"7","hashOfConfig":"8"},{"size":4207,"mtime":1611436533986,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1611210077583,"results":"10","hashOfConfig":"8"},{"size":1682,"mtime":1611382108811,"results":"11","hashOfConfig":"8"},{"size":346,"mtime":1611384078635,"results":"12","hashOfConfig":"8"},{"size":2058,"mtime":1611435868430,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"f369eu",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"16"},"/Volumes/PlugableSSD/slonoed/projects/petals/src/index.js",[],["30","31"],"/Volumes/PlugableSSD/slonoed/projects/petals/src/App.js",["32"],"import { useReducer, useEffect } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Dice from \"react-dice-roll\";\nimport \"./App.css\";\nimport \"./dices.css\";\nimport Rating from \"./rating\";\nimport Die from \"./die\";\nimport NumberSelector from \"./number\";\n\nconst pointsToWin = 7;\n\nconst initialState = {\n  screen: \"intro\", // intro\n  points: 0,\n  dices: [],\n  num: 0,\n  checkState: \"none\",\n};\n\nfunction rnd() {\n  return Math.round(Math.random() * 5 + 1);\n}\n\nfunction reducer(state, action) {\n  if (action.type === \"again\") {\n    return {\n      ...initialState,\n      screen: \"game\",\n    };\n  }\n\n  if (action.type === \"start\") {\n    return {\n      ...state,\n      screen: \"game\",\n    };\n  }\n\n  if (action.type === \"numChange\") {\n    return {\n      ...state,\n      num: action.value,\n    };\n  }\n\n  if (action.type === \"check\") {\n    if (state.checkState !== \"none\" || state.dices.length === 0) {\n      return state;\n    }\n    const correct = calcCorrect(state);\n\n    const isCorrect = correct === state.num;\n    const points = isCorrect ? state.points + 1 : 0;\n\n    if (points === pointsToWin) {\n      return {\n        ...state,\n        screen: \"win\",\n      };\n    }\n\n    return {\n      ...state,\n      points,\n      checkState: isCorrect ? \"correct\" : \"incorrect\",\n    };\n  }\n\n  if (action.type === \"roll\") {\n    return {\n      ...state,\n      dices: [rnd(), rnd(), rnd(), rnd(), rnd()],\n      checkState: \"none\",\n    };\n  }\n\n  return state;\n}\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const run = (type, params = {}) => (event) =>\n    dispatch({ ...params, type, value: event.target.value });\n\n  useEffect(() => {\n    const rollAll = (event) => {\n      const b = document.querySelectorAll(\"button._space3d\");\n      const z = [...b];\n      z.forEach((b) => {\n        b.click();\n      });\n    };\n\n    setTimeout(() => {\n      rollAll();\n    }, 30);\n  }, [state.dices]);\n\n  if (state.screen === \"intro\") {\n    return (\n      <div className=\"App\">\n        <div>\n          <h2>Petals around roses</h2>\n          <Button size=\"lg\" onClick={() => dispatch({ type: \"start\" })}>\n            Start game\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (state.screen === \"win\") {\n    return (\n      <div className=\"App\">\n        <div>\n          <h2>You won!</h2>\n          <b>You know the secret now!</b>\n          <br />\n          <br />\n          <Button onClick={() => dispatch({ type: \"again\" })}>\n            Play again\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App App_game\">\n      <Rating max={pointsToWin} current={state.points} />\n\n      <div className=\"dices\">\n        {state.dices.map((d, i) => (\n          <div key={i} className={\"dice-\" + i}>\n            <Die number={d} />\n          </div>\n        ))}\n      </div>\n\n      <div className=\"check-state\">\n        {state.checkState === \"correct\" ? (\n          <Alert variant=\"success\">Correct</Alert>\n        ) : null}\n        {state.checkState === \"incorrect\" ? (\n          <Alert variant=\"danger\">\n            Incorrect! Correct number is {calcCorrect(state)}\n          </Alert>\n        ) : null}\n      </div>\n\n      <div>\n        <br />\n        <NumberSelector\n          onChange={(value) => dispatch({ type: \"numChange\", value })}\n        />\n        <br />\n        <div\n          style={{\n            display: \"grid\",\n            gridGap: \"1em\",\n            gridTemplateColumns: \"1fr\",\n          }}\n        >\n          {state.checkState !== \"none\" || state.dices.length === 0 ? (\n            <Button onClick={run(\"roll\")} variant=\"success\">\n              Roll\n            </Button>\n          ) : (\n            <Button\n              onClick={run(\"check\")}\n              disabled={state.checkState !== \"none\" || state.dices.length === 0}\n            >\n              Check\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\nfunction calcCorrect(state) {\n  const correct = state.dices.reduce((acc, d) => {\n    let n = 0;\n    if (d === 3) {\n      n = 2;\n    }\n    if (d === 5) {\n      n = 4;\n    }\n    return acc + n;\n  }, 0);\n\n  return correct;\n}\n","/Volumes/PlugableSSD/slonoed/projects/petals/src/reportWebVitals.js",[],"/Volumes/PlugableSSD/slonoed/projects/petals/src/die.js",["33"],"import { useRef, useEffect } from \"react\";\n\nfunction getRandomNumber(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport default function Die({ number }) {\n  const die = useRef(null);\n\n  useEffect(() => {\n    die.current.classList.toggle(\"odd-roll\");\n    die.current.classList.toggle(\"even-roll\");\n    die.current.dataset.roll = number;\n  }, [number]);\n\n  return (\n    <ol ref={die} className=\"die-list even-roll\" data-roll=\"1\" id=\"die-1\">\n      <li className=\"die-item\" data-side=\"1\">\n        <span className=\"dot\"></span>\n      </li>\n      <li className=\"die-item\" data-side=\"2\">\n        <span className=\"dot\"></span>\n        <span className=\"dot\"></span>\n      </li>\n      <li className=\"die-item\" data-side=\"3\">\n        <span className=\"dot\"></span>\n        <span className=\"dot\"></span>\n        <span className=\"dot\"></span>\n      </li>\n      <li className=\"die-item\" data-side=\"4\">\n        <span className=\"dot\"></span>\n        <span className=\"dot\"></span>\n        <span className=\"dot\"></span>\n        <span className=\"dot\"></span>\n      </li>\n      <li className=\"die-item\" data-side=\"5\">\n        <span className=\"dot\"></span>\n        <span className=\"dot\"></span>\n        <span className=\"dot\"></span>\n        <span className=\"dot\"></span>\n        <span className=\"dot\"></span>\n      </li>\n      <li className=\"die-item\" data-side=\"6\">\n        <span className=\"dot\"></span>\n        <span className=\"dot\"></span>\n        <span className=\"dot\"></span>\n        <span className=\"dot\"></span>\n        <span className=\"dot\"></span>\n        <span className=\"dot\"></span>\n      </li>\n    </ol>\n  );\n}\n","/Volumes/PlugableSSD/slonoed/projects/petals/src/rating.js",[],"/Volumes/PlugableSSD/slonoed/projects/petals/src/number.js",["34"],"import { useState, useEffect, useRef } from \"react\";\nimport \"./number.css\";\n\nconst cellSize = 50;\nconst maxPos = cellSize * 2.5;\nconst minPos = -cellSize * 16.5;\n\nconst minmax = (min, max) => (n) => Math.max(min, Math.min(max, n));\n\nconst minmaxPos = minmax(minPos, maxPos);\n\nexport default function NumberSelector({ onChange }) {\n  const nums = [];\n  for (var i = 0, len = 20; i < len; i++) {\n    nums.push(<div className=\"num\">{i * 2}</div>);\n  }\n\n  const prevX = useRef(null);\n\n  const [position, setPosition] = useState(cellSize * 3);\n  const [moving, setMoving] = useState(false);\n\n  const onTouchStart = () => {\n    setMoving(true);\n  };\n  const onTouchEnd = () => {\n    setMoving(false);\n  };\n\n  useEffect(() => {\n    if (moving) {\n      const handler = (event) => {\n        event.preventDefault();\n        const touch = event.touches[0];\n        if (typeof prevX.current !== \"number\") {\n          prevX.current = touch.clientX;\n          return;\n        }\n\n        const diff = touch.clientX - prevX.current;\n        prevX.current = touch.clientX;\n\n        setPosition((pos) => minmaxPos(pos + diff));\n      };\n      document.addEventListener(\"touchmove\", handler, { passive: false });\n      return () => {\n        prevX.current = null;\n        document.removeEventListener(\"touchmove\", handler);\n      };\n    }\n\n    setPosition(\n      (position) =>\n        minmaxPos(\n          (Math.round((position + cellSize / 2) / cellSize) - 0.5) * cellSize\n        )\n      //                        get current cell     conv to px     move to cell center\n    );\n  }, [moving]);\n\n  useEffect(() => {\n    if (!moving) {\n      const num = ((maxPos - position) / cellSize) * 2;\n      if (Number.isInteger(num)) {\n        onChange(num);\n      }\n    }\n  }, [position, moving]);\n\n  return (\n    <div className=\"number\" onTouchStart={onTouchStart} onTouchEnd={onTouchEnd}>\n      <div\n        style={{ transform: `translate(${position}px, 0px)` }}\n        className=\"ninternal\"\n      >\n        {nums}\n      </div>\n      <div className=\"nframe\"></div>\n    </div>\n  );\n}\n",{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":4,"column":8,"nodeType":"41","messageId":"42","endLine":4,"endColumn":12},{"ruleId":"39","severity":1,"message":"43","line":3,"column":10,"nodeType":"41","messageId":"42","endLine":3,"endColumn":25},{"ruleId":"44","severity":1,"message":"45","line":68,"column":6,"nodeType":"46","endLine":68,"endColumn":24,"suggestions":"47"},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'Dice' is defined but never used.","Identifier","unusedVar","'getRandomNumber' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onChange'. Either include it or remove the dependency array. If 'onChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["50"],"no-global-assign","no-unsafe-negation",{"desc":"51","fix":"52"},"Update the dependencies array to be: [position, moving, onChange]",{"range":"53","text":"54"},[1749,1767],"[position, moving, onChange]"]